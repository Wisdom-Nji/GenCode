#ifndef GENCODE_H_INCLUDED_
#define GENCODE_H_INCLUDED_
#include "form.hpp"
#include "log.hpp"
#include <fstream>

using namespace std;

class GENCODE {
private:
  string htmlFile, outputFile, workingDirectory;
  vector<string> vt_file;
  vector<Form> vt_forms;
  string genHtml = "<?php\n//Generated by Gencode, created by Afkanerd\n\n";

public:
  GENCODE();
  bool launchParser(), parseGCD();
};

GENCODE::GENCODE() {
  cout << "GenCode version 2 --> Afkanerd Inc\n" << endl;
  cout << "HTML file path: ";
  getline(cin, this->htmlFile); //cannot be empty
  cout << "Output file name: ";
  getline(cin, this->outputFile);
  cout << "Working directory: ";
  getline(cin, this->workingDirectory);
}

bool GENCODE::launchParser() {
  system(string("java -jar Java/gencode.jar -f " + this->htmlFile + " -o " + this->outputFile + " -p " + this->workingDirectory).c_str());
  return true;
}

bool GENCODE::parseGCD() {
  Form form;
  string parseFile = this->workingDirectory + "/" + this->outputFile + ".gcd";
  string exportFile = this->workingDirectory + "/" + this->outputFile;
  string tmp; //should be deleted if possible

  ifstream readfile(parseFile.c_str());
  if(!readfile.good()) {
    LOG::Error("Missing GCD file");
    return false;
  } else {
    LOG::State("Found GCD file at " + parseFile);
  }

  while(getline(readfile, tmp)) vt_file.push_back(tmp);
  readfile.close();

  for(auto i: this->vt_file) {
    //parameters for start and stop
    if(i.find("Start-Form") != string::npos) {
      form = Form::get();
    } else if(i.find("End-Form") != string::npos) {
      form.write(this->genHtml);
      vt_forms.push_back(form);
    } else { //middle
      form.add(i);
    }
  }
  LOG::State("Done parsing GCD");

  ofstream writefile(exportFile.c_str());
  writefile << this->genHtml << " ?>" << endl;
  writefile.close();
  LOG::State("Everything done!! Good job");
  return true;
}

#endif
